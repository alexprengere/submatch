{"name":"SubMatch","tagline":"Match movies and subtitles from their names","body":"SubMatch\r\n========\r\n\r\nThis is a Python utility to match movies and subtitles inside a\r\ndirectory, based on their names. It is specially useful for series with\r\nlots of subtitles.\r\n\r\nThe output is a shell script containing the right `mv` commands.\r\n\r\nInstallation\r\n------------\r\n\r\n```bash\r\n$ python setup.py install --user\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n```bash\r\n$ submatch -h\r\nusage: submatch [-h] [-l L] [-r] [-z] [-n] [-N]\r\n\r\noptional arguments:\r\n  -h, --help       show this help message and exit\r\n  -l L, --limit L  Change lower bound for matching ratio. Default is 0.6.\r\n                   Matches below that percentage are automatically excluded.\r\n  -r, --reverse    Reverse the logic of renaming. With this option, movies are\r\n                   renamed, not subtitles.\r\n  -z, --zip        Change the logic of matching. Zip the sorted list of movies\r\n                   and subtitles instead of match on names. This will not use\r\n                   -l/--limit option.\r\n  -n, --numbers    Change the logic of matching. Use numbers in names to\r\n                   perform the matching. This will not use -l/--limit option.\r\n  -N, --no-ext     Consider files with no extension as movies.\r\n```\r\n\r\nExample\r\n-------\r\n\r\nSuppose you have some movies and subtitles:\r\n\r\n```bash\r\n$ touch tata.avi titi.sub toto.avi toto.srt TUTU.AVI tutu.fr.srt\r\n```\r\n\r\nAfter installation, just run the tool in the folder:\r\n\r\n```bash\r\n$ submatch\r\n# \r\n# Unmatched subtitles:\r\n# [      ] ./titi.sub                                                  \r\n# \r\n# Unmatched movies:\r\n# [      ] ./tata.avi                                                  \r\n# \r\n# Matching results with method \"NAMES\":\r\n#  * column 1  : Levenshtein distance between movie name and sub name\r\n#  * column 2  : '✓' if movie name and sub name contain then same numbers\r\n#  * column 3+ : [numbers] movie ... [numbers] sub (color based on numbers)\r\n# \r\n# 100.0% ✓ [      ] ./toto.avi              [      ] ./toto.srt\r\n#  72.7% ✓ [      ] ./TUTU.AVI              [      ] ./tutu.fr.srt\r\n\r\n# Actual moves proposed\r\n# Already good: \"./toto.srt\"\r\nmv \"./tutu.fr.srt\" \"./TUTU.srt\" \r\n```\r\n\r\nYou can then actually perform the move like this:\r\n\r\n```bash\r\n$ submatch | sh\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}